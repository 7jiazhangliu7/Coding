//https://leetcode.com/problems/word-break-ii/
O(m*n^2) time, m: length of dict, n length of string

public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> result = new ArrayList<String>();
        if(s == null || s.length() == 0 || !canBreak(s, wordDict)) {
            return result;
        }
        helper(s, wordDict, result, 0, "");
        
        return result;
    }
    
    //dfs
    public void helper(String s, Set<String> wordDict, List<String> result, int pos, String temp) {
        if(pos == s.length()) {
            result.add(new String(temp.substring(1)));
            return;
        }
        //从pos开始，每一个往后，如果substring在dict里，就接着dfs
        for(int i = pos; i < s.length(); i++) {
            String sub = s.substring(pos, i+1);
            if(wordDict.contains(sub)) {
                helper(s, wordDict, result, i+1, temp+" "+sub);
            }
        }
    }
    
    public boolean canBreak(String s, Set<String> wordDict) {
        if(s == null || s.length() == 0) return false;
        
        boolean[] dp = new boolean[s.length()+1];
        dp[0] = true;
        
        for(int i = 1; i <= s.length(); i++) {
            for(int j = 0; j < i; j++) {
                if(dp[j] && wordDict.contains(s.substring(j,i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[s.length()];
    }
}
