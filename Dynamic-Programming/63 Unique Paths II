//https://leetcode.com/problems/unique-paths-ii/
O(n^2) space O(n^2) time

public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null) {
            return -1;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int[][] dp = new int[m][n];
        
        boolean col = false;
        for(int i = 0; i < m; i++) {
            if(obstacleGrid[i][0] == 1) {
                dp[i][0] = 0;
                col = true;
            } 
            if(col) {
                dp[i][0] = 0;
            } else {
                dp[i][0] = 1;
            }
        }
        
        boolean row = false;
        for(int i = 0; i < n; i++) {
            if(obstacleGrid[0][i] == 1) {
                dp[0][i] = 0;
                row = true;
            }
            if(row) {
                dp[0][i] = 0;
            }else {
                dp[0][i] = 1;
            }
        }
        
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }

        return dp[m-1][n-1];
    }
}
