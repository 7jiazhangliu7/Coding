//https://leetcode.com/problems/binary-tree-postorder-traversal/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root == null)  return result;
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        while(!stack.isEmpty()) {
        // 这里先用peek()得到根，并不急着加进result里
            TreeNode node = stack.peek();
            
            //如果左右孩子都为null，则表示我们到了leaf或者之前处理过左右孩子了
            if(node.left == null && node.right == null) {
                result.add(node.val);
                node = stack.pop();
            } 
            
            //如果左孩子不为null，那么把他左孩子加进stack中，并且设左孩子位null，代表已经处理了
            if(node.left != null) {
                stack.push(node.left);
                node.left = null;
                continue;
            }
            
            // similar to above
            if(node.right != null) {
                stack.push(node.right);
                node.right = null;
                continue;
            }
        }
        
        return result;
    }
}
